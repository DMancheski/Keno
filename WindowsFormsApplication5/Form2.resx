<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Часовник: Одкако времето помине на часовникот, почнува да се избираат броеви според случајност.
Табела со броеви: Играчот треба да си ги избере своите броеви со кои ќе учествува во играта, прикажани на табелата со броеви од 1-80 кои можат да се изберат. Одкако ќе се изберат се обележуваат во црвена боја и се ставаат
 во кошничката одма до табелта за избор.

Почеток на игра: Играта ( извлекувањето ) започнува кога часовникот ќе дојде до 0. Се започнува извлекување на броеви кои се прикажуваат во жолти топчиња односно не погодени и црвени топчина односно погодоци. 
Секој играч се рачуна дека учествува во играта доколку има изберено минимум 4 топчиња од табелата за избор пред истекот на времето, и има уплатено минимум 20 денари. Доколку овај услов не е исполнет, корисникот 
ќе добие информации за погодоци доколку има селектирано броеви, но нема да биде учесник во играта, односно нема да добие добивка. 

Внес на кредит: Во полето назначено за внес на кредит се дополнува кредитот за игра, кој е прикажан во црвеното поле со име Кредит. Доколку има внесено кредит, дозволено е да се уплати во полето за Уплата. 
Копчето поништи ја брише уплатата во игра, и го враќа износот во нашиот кредит. 

Исплата: Со внес на количината која сакаме да си ја подигнеме и кликање на кочето подигни, подигаме износ не поголем од нашиот кредит.

Брза игра: Доколку сметаме дека сме ја направиле соодветната комбинација, со клик на кочето брза игра, го редуцираме времето на 10 секунди.

Инфо табела: Табелата со Погодоци, Коефициент и Добивка ни прикажува колку би ни била добивката во зависност од погодените бројки, и ни ја кажува тековната состојба на добивка и бонусот кој варира 
во зависност од успешноста на погодоците. 

Избери случајно: Ни овозможува програмата сама (случајно) да ни избере броеви за игра, во зависност од тоа колку броеви сакаме да играме.

Податоци на извлекување: Ни дава информација за тоа кој броеви биле извлечени во последните 4 круга, броевите со црвена боја се последните два круга, а со плаво последните 3 и 4ти круг.

Нова игра: Кога извлекувањето ќе заврши, добивката се собира со расположливиот кредит и доколку сакаме да играме повторно, со кликање на Нова игра сатот за одбројување се ресетира на 2 минути
 и имаме можност да избереме нови комбинации.

Затвори: Апликацијата се затвора.
</value>
  </data>
</root>